//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a mozart.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using Mozart.Common;
using Mozart.Collections;
using Mozart.Extensions;
using Mozart.Mapping;
using Mozart.Data;
using Mozart.Data.Entity;
using Mozart.Task.Execution;
using Mozart.Task.Execution.Persists;
using MicronBEAssy.Inputs;
using MicronBEAssy.Outputs;

namespace MicronBEAssy.Persists
{
    
    /// <summary>
    /// Assy Persist Model class
    /// </summary>
    public partial class Assy_Persist : PersistModule
    {
        public override string Name
        {
            get
            {
                return "Assy";
            }
        }
        protected override void Configure()
        {
            InputPersister input = new InputPersister();
            ServiceLocator.RegisterInstance<IInputPersister> (input);
            OutputPersister output = new OutputPersister();
            ServiceLocator.RegisterInstance<IOutputPersister> (output);
        }
        /// <summary>
        /// persist context class
        /// </summary>
        internal partial class InputPersister : InputPersisterBase
        {
            private MicronBEAssy.Logic.PersistInputs fPersistInputs = new MicronBEAssy.Logic.PersistInputs();
            protected override void Configure()
            {
                #region Init Config
                // Init
                this.SetParametersInfo(typeof(GlobalParameters), typeof(ConfigParameters), null, null, null, null);
                #endregion
                #region Set Property
                ThreadCount = 1;
                RetryCount = 3;
                ExceptionPolicy = PersistExceptionPolicy.LogOnly;
                #endregion
                #region Inputs Config
                // Inputs
                this.Log("Input loading");
                this.StartPerformance();
                #region * Preloading * Config
                // * Preloading *
                this.StartPreloading();
                this.StartPerformance();
                this.EndPerformance();
                this.EndPreloading();
                // * Preloading * End
                #endregion
                #region BOP Persists Config
                // BOP Persists
                this.StartPerformance();
                this.Load<StepMaster>("StepMaster", false, true, null);
                this.Action("StepMaster", null);
                this.Load<ProcessStep>("ProcessStep", false, true, fPersistInputs.OnAfterLoad_ProcessStep);
                this.Action("ProcessStep", fPersistInputs.OnAction_ProcessStep);
                this.Load<ProductMaster>("ProductMaster", false, true, fPersistInputs.OnAfterLoad_ProductMaster);
                this.Action("ProductMaster", null);
                this.Load<McpBom>("McpBom", false, true, fPersistInputs.OnAfterLoad_McpBom);
                this.Action("McpBom", fPersistInputs.OnAction_McpBom);
                this.Load<ProductRoute>("ProductRoute", false, true, fPersistInputs.OnAfterLoad_ProductRoute);
                this.Action("ProductRoute", null);
                this.Load<MaterialBom>("MaterialBom", false, true, null);
                this.Action("MaterialBom", null);
                this.Load<BinSplitInfo>("BinSplitInfo", false, true, null);
                this.Action("BinSplitInfo", null);
                this.Load<AltProductInfo>("AltProductInfo", false, true, null);
                this.Action("AltProductInfo", null);
                this.EndPerformance();
                // BOP Persists End
                #endregion
                #region General Persists Config
                // General Persists
                this.StartPerformance();
                this.Load<Demand>("Demand", false, true, fPersistInputs.OnAfterLoad_Demand);
                this.Action("Demand", null);
                this.Load<StepTat>("StepTat", false, true, fPersistInputs.OnAfterLoad_StepTat);
                this.Action("StepTat", null);
                this.Load<Yield>("Yield", false, true, null);
                this.Action("Yield", null);
                this.Load<ActInfo>("ActInfo", false, true, fPersistInputs.OnAfterLoad_ActInfo);
                this.Action("ActInfo", null);
                this.Load<HoldInfo>("HoldInfo", false, true, null);
                this.Action("HoldInfo", null);
                this.EndPerformance();
                // General Persists End
                #endregion
                #region Wip Persists Config
                // Wip Persists
                this.StartPerformance();
                this.Load<Wip>("Wip", false, true, fPersistInputs.OnAfterLoad_Wip);
                this.Action("Wip", null);
                this.Load<MoveWip>("MoveWip", false, true, null);
                this.Action("MoveWip", null);
                this.Load<SubConWip>("SubConWip", false, true, null);
                this.Action("SubConWip", null);
                this.Load<MaterialWip>("MaterialWip", false, true, null);
                this.Action("MaterialWip", null);
                this.Load<WaferSupplyPlan>("WaferSupplyPlan", false, true, null);
                this.Action("WaferSupplyPlan", null);
                this.Load<MaterialSupplyPlan>("MaterialSupplyPlan", false, true, null);
                this.Action("MaterialSupplyPlan", null);
                this.EndPerformance();
                // Wip Persists End
                #endregion
                #region Schedule Persists Config
                // Schedule Persists
                this.StartPerformance();
                this.Load<Equipment>("Equipment", false, true, fPersistInputs.OnAfterLoad_Equipment);
                this.Action("Equipment", null);
                this.Load<EqpStatus>("EqpStatus", false, true, null);
                this.Action("EqpStatus", null);
                this.Load<PMSchedule>("PMSchedule", false, true, null);
                this.Action("PMSchedule", null);
                this.Load<EqpArrange>("EqpArrange", false, true, null);
                this.Action("EqpArrange", null);
                this.Load<StepTime>("StepTime", false, true, fPersistInputs.OnAfterLoad_StepTime);
                this.Action("StepTime", null);
                this.Load<SetupInfo>("SetupInfo", false, true, fPersistInputs.OnAfterLoad_SetupInfo);
                this.Action("SetupInfo", null);
                this.Load<SetupCrew>("SetupCrew", false, true, null);
                this.Action("SetupCrew", null);
                this.Load<ToolMaster>("ToolMaster", false, true, null);
                this.Action("ToolMaster", null);
                this.Load<ToolArrange>("ToolArrange", false, true, null);
                this.Action("ToolArrange", null);
                this.Load<PGMSetting>("PGMSetting", false, true, null);
                this.Action("PGMSetting", null);
                this.Load<ToolStatus>("ToolStatus", false, true, null);
                this.Action("ToolStatus", null);
                this.Load<StdLotSize>("StdLotSize", false, true, null);
                this.Action("StdLotSize", null);
                this.EndPerformance();
                // Schedule Persists End
                #endregion
                #region UI Persists Config
                // UI Persists
                this.StartPerformance();
                this.Load<StdStep>("StdStep", false, true, null);
                this.Action("StdStep", null);
                this.EndPerformance();
                // UI Persists End
                #endregion
                this.EndPerformance();
                // Inputs End
                #endregion
            }
        }
        /// <summary>
        /// persist context class
        /// </summary>
        internal partial class OutputPersister : OutputPersisterBase
        {
            protected override void Configure()
            {
                #region Set Property
                ThreadCount = 1;
                RetryCount = 3;
                ExceptionPolicy = PersistExceptionPolicy.StopAtThrown;
                #endregion
                #region Outputs Config
                // Outputs
                this.Log("Output saving");
                this.StartPerformance();
                #region Backward Persists Config
                // Backward Persists
                this.StartPerformance();
                this.Commit<StepTarget>("StepTarget", true, true);
                this.Commit<PegHistory>("PegHistory", true, true);
                this.Commit<UnPegHistory>("UnPegHistory", true, true);
                this.EndPerformance();
                // Backward Persists End
                #endregion
                #region Forward Persists Config
                // Forward Persists
                this.StartPerformance();
                this.Commit<EqpPlan>("EqpPlan", true, true);
                this.EndPerformance();
                // Forward Persists End
                #endregion
                #region Log Persists Config
                // Log Persists
                this.StartPerformance();
                this.Commit<ErrorHistory>("ErrorHistory", true, true);
                this.EndPerformance();
                // Log Persists End
                #endregion
                #region General Persists Config
                // General Persists
                this.StartPerformance();
                this.Commit<MasterDataErrorLog>("MasterDataErrorLog", true, true);
                this.EndPerformance();
                // General Persists End
                #endregion
                this.EndPerformance();
                // Outputs End
                #endregion
            }
        }
    }
}
